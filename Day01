from sympy import Symbol, divisors, mod_inverse, Poly
from functools import reduce

# Given data - its example data please replace it with your copy and paste data from  https://quilibrium.com/hexmas
points = [[1, 1561874051],[2, 263342934],[3, 914073770],[4, 391101862],[5, 636037961],[6, 1976189601],[7, 740649728],[8, 1908770858],[9, 1693868177],[10, 191693699]], 
modulus 2147483647

# Lagrange Interpolation in a finite field
def lagrange_interpolation(points, x, modulus):
    def L(i):
        X_i, Y_i = points[i]
        numer = reduce(lambda x, y: x * y, [(x - X_j) % modulus for j, (X_j, _) in enumerate(points) if j != i], 1)
        denom = reduce(lambda x, y: x * y, [(X_i - X_j) % modulus for j, (X_j, _) in enumerate(points) if j != i], 1)
        return Y_i * numer * mod_inverse(denom, modulus) % modulus
    return sum(L(i) for i in range(len(points))) % modulus

# Calculate the secret using any six points
secret = lagrange_interpolation(points[:6], 0, modulus)
secret
